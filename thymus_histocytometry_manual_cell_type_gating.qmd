---
title: "Histocytometry manual cell type gating"
format: html
editor: visual
---

```{r, include= FALSE}
knitr::opts_chunk$set(echo= FALSE)
library(dplyr)
library(ggplot2)
library(data.table)
```

```{r}
raw_dir= "/stor/scratch/Ehrlich/Users/John/histocytometry/raw_images"
image_dirs= list.files(path= raw_dir, pattern= "(2|4)0x_", full.names= TRUE)
```


## Making manual gating
```{r}
manual_gates <- vector(mode= "list", length= length(image_dirs))
names(manual_gates) <- image_dirs

## 20x_pan1_DAPI_CD63_CD11c_Sirpa 
  ## aDC1: 
  ## CD63 range: c(0,1)
  ## CD11c range: 

data.frame(cell_type = c(rep("aDC1",times= 3),
                         rep("aDC2", times= 3)),
           markers   = rep(c("CD63", "CD11c", "Sirpa"), times= 2),
           min_expression = c(0, 0, 0, 1, 1, 1),
           max_expression = c(1, 1, 1, 0, 0, 0))


```


```{r}
raw_dir= "/stor/scratch/Ehrlich/Users/John/histocytometry/raw_images"
image_dirs= list.files(path= raw_dir, pattern= "(2|4)0x_", full.names= TRUE)
image_dirs= image_dirs[!grepl("pan", image_dirs)]

for(image_dir in image_dirs){
  manual_gate <- manual_gates[names(manual_gates) == image_dir]
  scyan_pops <- paste0(image_dir, "/original_scyan_pops.csv") %>% 
    fread() %>% 
    as.data.frame() %>% 
    select(CellID, immune_cell) 
  cell_type_df <- as.data.frame(fread(paste0(image_dir, "/sub_image_mask.csv"))) %>% 
    full_join(scyan_pops, by= "CellID")

    ## Cells that are lost here were excluded based on an Area criteria when making the original scyan_pops
  
  
  ## Using the basic boundaries found by scyan to call cell types
  
  ## Why are there NA values in the cell clusters?

  if(grepl("DAPI_CD63_CD11c_Sirpa", image_dir)){
    cell_type_df <- cell_type_df %>% 
      mutate(category = case_when(
        CD63  >= min(c(cell_type_df[cell_type_df$immune_cell == "aDC2","CD63"], 36), na.rm= TRUE)  &
        Sirpa >  min(c(cell_type_df[cell_type_df$immune_cell == "aDC2", "Sirpa"], 15), na.rm= TRUE) ~ "aDC2",
        
        CD63  < min(cell_type_df[cell_type_df$immune_cell == "aDC2", "CD63"], na.rm= TRUE) &
        CD11c < max(cell_type_df[cell_type_df$immune_cell == "cDC2", "CD11c"], na.rm= TRUE) ~ "cDC2"),
             category = ifelse(is.na(category), "Not_clustered", category))
  } else if(grepl("DAPI_CD63_CD11c_XCR1", image_dir)){
    cell_type_df <- cell_type_df %>% 
      mutate(category = case_when(
        CD63  >= min(cell_type_df[cell_type_df$immune_cell == "aDC1", "CD63"],  na.rm= TRUE) & 
        CD11c >= min(cell_type_df[cell_type_df$immune_cell == "aDC1", "CD11c"], na.rm= TRUE) &
        XCR1  >= min(cell_type_df[cell_type_df$immune_cell == "aDC1", "Sirpa"], na.rm= TRUE) ~ "aDC1",
        
        CD63 <  min(cell_type_df[cell_type_df$immune_cell == "aDC1", "CD63"],  na.rm= TRUE)  & 
        XCR1 >= min(cell_type_df[cell_type_df$immune_cell == "aDC1", "Sirpa"], na.rm= TRUE) ~ "aDC2"),
        category = ifelse(is.na(category), "Not_clustered", category))
  }
  
  if(any(grepl("category", colnames(cell_type_df)))){
    fwrite(x       = cell_type_df, 
         file      = paste0(image_dir, "/scyan_pops.csv"),
         row.names = FALSE) 
  }
}
```


```{r}


```



